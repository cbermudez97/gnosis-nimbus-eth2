name: release

on:
  # schedule:
  #   - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      ref:
        description: "Nimbus repository reference to build"
        required: true
        type: string
      tag:
        description: "Tag to use for the release"
        required: false
        type: string
      arch:
        description: "Architecture to build for"
        required: true
        type: choice
        default: "linux/amd64"
        options:
          - linux/amd64
          - linux/arm64

jobs:
  build:
    # The binary needs to be built in the same Docker image used as base
    # in the final image in order to link the right dependencies.
    container: debian:bullseye-slim
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    env:
      VERSION: ${{ inputs.ref }}

    steps:
      - name: Install dependencies in build container
        run: |
          apt update
          apt install -y git build-essential

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: status-im/nimbus-eth2
          ref: ${{ env.VERSION }}
          submodules: recursive

      - name: Build binaries
        run: |
          # Change repo owner, as it otherwise causes git safe.directory issues for some reason
          chown -R root: .

          # Configuration
          PLATFORM=${{ fromJson('{ "linux/amd64": "Linux_amd64", "linux/arm64": "Linux_arm64v8" }')[inputs.arch] }}
          DEPENDENCIES=${{ fromJson('{ "linux/arm64": "gcc-aarch64-linux-gnu" }')[inputs.arch] }}

          # Patch the upstream build script
          sed -i "s#/home/user/nimbus-eth2#$(pwd)#" ./docker/dist/entry_point.sh
          sed -i 's/^BINARIES=.*/BINARIES="nimbus_beacon_node"/g' ./docker/dist/entry_point.sh
          sed -i 's/^NIMFLAGS_COMMON="/NIMFLAGS_COMMON="-d:gnosisChainBinary -d:const_preset=gnosis /g' ./docker/dist/entry_point.sh

          # Install cross-compile dependencies
          [ ! -z $DEPENDENCIES ] && apt install -y $DEPENDENCIES

          # Build the client for the given platform
          ./docker/dist/entry_point.sh $PLATFORM

      - name: String manipulation
        id: artifact
        run: |
          NAME=${{ inputs.arch }}
          echo "name=${NAME//\//-}" >> $GITHUB_OUTPUT

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ./build

  package:
    runs-on: ubuntu-latest

    if: always() && needs.build.result == 'success'
    needs: [build]
    env:
      VERSION: ${{ inputs.tag || inputs.ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern=v{{version}},value=${{ env.VERSION }}
            type=semver,pattern=v{{major}}.{{minor}},value=${{ env.VERSION }}
            type=semver,pattern=v{{major}},value=${{ env.VERSION }}
            type=raw,value=${{ env.VERSION }},enable=${{ github.event_name != 'schedule' }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ fromJson('{ "linux/amd64":"linux/amd64","linux/arm64":"linux/arm64/v8" }')[inputs.arch] }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
